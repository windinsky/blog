var EventEmitter = require('events').EventEmitter,
	config;
	mysql = require('mysql');


function CreateClient(){
	var client = mysql.createConnection(config);
	return client;
}

function FormatColumnValue(value){
	switch(value.constructor){
		case Number:
			return parseFloat(value);
			break;
		case String:
			return '"' + value.replace(/\"/g,escape('"')) + '"';
			break;
		case Date:
			return '"'+value.getFullYear()+'-'+(value.getMonth()+1)+'-'+value.getDate()+' '+value.getHours() + ':' + value.getMinutes() + ':'+value.getSeconds()+'"';
		default:
			return '""';
	}
}

exports.config = function(cfg){
	config = cfg;
}

exports.getStructure = function(func){
	if (!config) {
		throw '=====Error: database is not specified=====';
	};
	var client = CreateClient(),
		structure = {},
		tableSql = 'SELECT table_name FROM information_schema.tables where table_schema="' + config.database + '"';
	
	client.query(tableSql,function(err, results, fields){
		if (err) {
			throw err;
		};
		
		var table_names = results.map(function(item){
			return item.table_name;
		});
		
		var colSql = 'SELECT column_name,data_type,table_name FROM information_schema.columns WHERE table_schema="'+config.database+'" and table_name in ("'+table_names.join('","')+'")';
		
		client.query(colSql, function(err, columns){
			var obj = {};
			columns.forEach(function(c){
				if (obj[c.table_name]) {
					obj[c.table_name].push({
						name: c.column_name,
						type: c.data_type
					});
				}else{
					obj[c.table_name] = [{
						name: c.column_name,
						type: c.data_type
					}];
				}
			});
			func(obj);
		});
	});
}

exports.createDatabase = function(databaseName){
	var client = CreateClient();
    var query = client.query('CREATE DATABASE ' + databaseName);
	client.end();
	return query;
};

exports.createTable = function(database,tableName,columns,primary){
	var client = CreateClient(database),
		hasClomns = false,
		sql = 'CREATE TABLE IF NOT EXISTS ' + tableName,
		_sql = [];
	
	for(var i in columns){
		hasClomns = true;
		_sql .push(i + ' ' + columns[i]);
	}
	
	if (primary) {
		hasClomns = true;
		_sql.push('PRIMARY KEY (' + primary + ')');
	};
	
	hasClomns && (sql += ' (' + _sql.join(',') + ')');
	sql += ' DEFAULT CHARSET utf8 COLLATE utf8_general_ci';
	// console.log(sql)
	var query = client.query(sql);
	client.end();
	return query;
};

exports.dropTable = function(database,tableName){
	var client = CreateClient(database);
	var query = client.query('DROP TABLE ' + tableName);
	client.end();
	return query;
};

exports.addColumn = function(database,tableName,columnName,columnInfo){
	var client = CreateClient(database);
	var query = client.query('ALTER TABLE '+tableName+' ADD COLUMN ' + columnName + ' ' + columnInfo);
	client.end();
	return query;
};

exports.dropColumn = function(database,tableName,columnName){
	var client = CreateClient(database);
	var query = client.query('ALTER TABLE '+tableName+' DROP COLUMN ' + columnName);
	client.end();
	return query;
};

exports.find = function(database,tableName,columnName,val,cb){
	var client = CreateClient(database),sql;
	if (undefined === columnName || Function === columnName.constructor) {
		sql = 'select * from ' + tableName;
	}else{
		sql = 'select * from ' + tableName + ' where ' + columnName + ' = ' + FormatColumnValue(val);
	}
	var query = client.query(sql,cb || columnName);
	return query;
};

exports.query = function(database,tableName,conditions,limit,cb){
	if (!conditions) throw 'No conditions inputed';
	if (conditions.constructor && constructor.constructor === String) {
		return CreateClient(database).query('select * from ' + tableName + ' where '+conditions+(limit ? (' limit '+limit) : ''),cb);
	}
	if (conditions.constructor && conditions.constructor === Object) {
		var arr = [],sql = 'select * from ' + tableName + ' where ';
		for(var i in conditions){
			arr.push(i+'='+FormatColumnValue(conditions[i]));
		}
		sql += arr.join(' and ');
		limit && (sql += ' limit ' + limit);
		return CreateClient(database).query(sql,cb);
	};
	if (conditions.constructor && conditions.constructor === Array) {
		var arr = [],sql = 'select * from ' + tableName + ' where ';
		for (var i=0; i < conditions.length; i++) {
			var arr1 = [];
			for(var j in conditions[i]){
				arr1.push(j+'='+FormatColumnValue(conditions[i][j]));
			}
			arr1 = '('+arr1.join(' and ')+')';
			arr.push(arr1);
		};
		sql += arr.join(' or ');
		limit && (sql += ' limit ' + limit);
		return CreateClient(database).query(sql,cb);
	};
}

exports.create = function(database,tableName,datas){
	var q = new EventEmitter();
	var client = CreateClient(database),keys=[],values=[];
	for(var i in datas){
		keys.push(i);
		values.push(FormatColumnValue(datas[i]));
	}
	var sql = 'INSERT INTO ' + tableName + ' (' + keys.join(',') + ')' + ' values (' + values.join(',') + ' );';
	var query = client.query(sql);
	return query;
}

exports.createAll = function(database,tableName,datas){
	
}

exports.del = function(database,tableName,datas){
	
}



exports.update = function(database,tableName,datas,conditions,cb){
	var client = CreateClient(database),keys=[],values=[],conditionStr=[];
	if (!conditions || !conditions.constructor) throw 'conditions error';
	for(var i in datas){
		keys.push(i+'='+FormatColumnValue(datas[i]));
	}
	if (conditions.constructor == Object) {
		for(var i in conditions){
			conditionStr.push(i+'='+FormatColumnValue(conditions[i]));
		}
		conditionStr = conditionStr.join(' and ');
	};
	if (conditions.constructor == Array) {
		
		for (var i=0; i < conditions.length; i++) {
			var arr = [];
			for(var j in conditions[i]){
				arr.push(j+'='+FormatColumnValue(conditions[i][j]));
			}
			conditionStr.push('('+arr.join(' and ')+')');
		};
		conditionStr = conditionStr.join(' or ');
	};
	if (conditionStr) {
		var sql = 'UPDATE ' + tableName + ' SET ' + keys.join(',') + ' where (' + conditionStr +')';
		var query = client.query(sql,cb);
		return query;
	}else{
		throw 'conditions error';
	}
}